(function () {
    "use strict";

    var services = angular.module('EntityModel', []);

    services.factory('EntityModel', function ($http, $log, $rootScope, ngBreeze) {

        // alias
        var DT = ngBreeze.DataType;

        function initialize(metadataStore) {

            metadataStore.addEntityType({
                shortName: "Employee",
                namespace: "Context",
                autoGeneratedKeyType: ngBreeze.AutoGeneratedKeyType.Identity,
                dataProperties: {
                    id: {
                        dataType: DT.String,
                        isPartOfKey: true
                    },
                    name: {
                        dataType: DT.String
                    }
                },
                navigationProperties: {
                    tagMaps: {
                        isScalar: false,
                        entityTypeName: "EmployeeTagMap:#Context",
                        associationName: "Employee_EmployeeTagMap"
                    }
                }
            });


            function Employee() {
            }

            var employeeInitializer = function (employee) {
            };

            metadataStore.setEntityTypeForResourceName('Employee', 'Employee');
            metadataStore.registerEntityTypeCtor("Employee", Employee, employeeInitializer);


            metadataStore.addEntityType({
                shortName: "EmployeeTagMap",
                namespace: "Context",
                autoGeneratedKeyType: ngBreeze.AutoGeneratedKeyType.Identity,
                dataProperties: {
                    id: {
                        dataType: DT.String,
                        isPartOfKey: true
                    },
                    employee_id: {dataType: DT.String},
                    tag_id: {dataType: DT.String}
                },
                navigationProperties: {
                    employee: {
                        isScalar: true,
                        entityTypeName: "Employee:#Context",
                        associationName: "Employee_EmployeeTagMap",
                        foreignKeyNames: ["employee_id"]
                    },
                    tag: {
                        isScalar: true,
                        entityTypeName: "Tag:#Context",
                        associationName: "Tag_EmployeeTagMap",
                        foreignKeyNames: ["tag_id"]
                    }
                }
            });

            function EmployeeTagMap() {
            };

            var employeeTagMapInitializer = function (employeeTagMap) {

            }

            metadataStore.setEntityTypeForResourceName('EmployeeTagMap', 'EmployeeTagMap');
            metadataStore.registerEntityTypeCtor("EmployeeTagMap", EmployeeTagMap, employeeTagMapInitializer);


            metadataStore.addEntityType({
                shortName: "Tag",
                namespace: "Context",
                autoGeneratedKeyType: ngBreeze.AutoGeneratedKeyType.Identity,
                dataProperties: {
                    id: {
                        dataType: DT.String,
                        isPartOfKey: true
                    },
                    name: {
                        dataType: DT.String
                    }
                },
                navigationProperties: {
                    employeeMaps: {
                        isScalar: false,
                        entityTypeName: "EmployeeTagMap:#Context",
                        associationName: "Tag_EmployeeTagMap"
                    }
                }
            });

            metadataStore.setEntityTypeForResourceName('Tag', 'Tag');
            function Tag() {
            };

            var tagInitializer = function (tag) {
            }

            metadataStore.setEntityTypeForResourceName('Tag', 'Tag');
            metadataStore.registerEntityTypeCtor("Tag", Tag, tagInitializer);


        }

        return {
            initialize: initialize
        }
    })


})();






